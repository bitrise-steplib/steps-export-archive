format_version: 6
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

app:
  envs:
  - RELEASE_VERSION: 1.0.1
  - ORIG_BITRISE_SOURCE_DIR: $BITRISE_SOURCE_DIR
  - SAMPLE_ARTIFACTS_URL: https://github.com/bitrise-io/sample-artifacts.git
  - SAMPLE_ARTIFACTS_BRANCH: master

workflows:
  # ----------------------------------------------------------------
  # --- Workflows for testing
  test:
    steps:
    - go-list:
    - golint:
    - errcheck:
    - go-test:
    after_run:
    - test_xcode
    - test_tvos
    - test_custom_plist
    - test_xamarin

  test_xcode12:
    steps:
    - go-list:
    - golint:
    - errcheck:
    - go-test:
    after_run:
    - test_appclip

  test_xamarin:
    envs:
    - SAMPLE_APP_URL: https://github.com/bitrise-samples/sample-apps-xamarin-cross-platform.git
    - BRANCH: master
    - BITRISE_PROJECT_PATH: Multiplatform.sln
    - BITRISE_XAMARIN_CONFIGURATION: Release
    - BITRISE_XAMARIN_PLATFORM: iPhone
    - LEGACY: "no"
    before_run: 
    - _common_prepare
    after_run:
    - _common_test
    steps:
    - script:
        inputs:
        - content: |-
            #!/usr/bin/env bash

            if [[ -z "${SAMPLE_APP_URL}" ]]; then
            echo "error: there is no SAMPLE_APP_URL env var specified"
            exit 1
            elif [[ -z "${COMMIT}" && -z "${BRANCH}" ]]; then
            echo "error: can't checkout: there is no BRANCH or COMMIT env var specified"
            exit 1
            fi

            git init
            git remote add origin "${SAMPLE_APP_URL}" 
            git fetch || exit 1

            [[ -n "${COMMIT}" ]] && git checkout "${COMMIT}" || git checkout "${BRANCH}"
    - nuget-restore:
        inputs:
        - nuget_version: ""
    - xamarin-archive:
        inputs:
        - project_type_whitelist: ios
    - script:
        title: ""
        inputs:
        - content: rm "$BITRISE_IPA_PATH"

  test_xcode:
    envs:
    - SAMPLE_APP_URL: $SAMPLE_ARTIFACTS_URL
    - BRANCH: $SAMPLE_ARTIFACTS_BRANCH
    - LEGACY: "no"
    - PRODUCT: "app"
    - BITRISE_XCARCHIVE_PATH: "./archives/ios.xcarchive"
    after_run: 
    - _common_prepare
    - _common_clone
    - _common_test

  test_custom_plist:
    envs:
    - SAMPLE_APP_URL: $SAMPLE_ARTIFACTS_URL
    - BRANCH: $SAMPLE_ARTIFACTS_BRANCH
    - LEGACY: "no"
    - PRODUCT: "app"
    - BITRISE_XCARCHIVE_PATH: "./archives/ios.xcarchive"
    - PLIST: |-
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
            <dict>
            	<key>compileBitcode</key>
            	<false/>
            	<key>destination</key>
            	<string>export</string>
            	<key>method</key>
            	<string>development</string>
            	<key>provisioningProfiles</key>
            	<dict>
            		<key>com.bitrise.code-sign-test</key>
            		<string>BitriseBot-Wildcard</string>
            		<key>com.bitrise.code-sign-test.share-extension</key>
            		<string>BitriseBot-Wildcard</string>
            		<key>com.bitrise.code-sign-test.watchkitapp</key>
            		<string>BitriseBot-Wildcard</string>
            		<key>com.bitrise.code-sign-test.watchkitapp.watchkitextension</key>
            		<string>BitriseBot-Wildcard</string>
            	</dict>
            	<key>signingCertificate</key>
            	<string>iPhone Developer: Dev Portal Bot Bitrise (E89JV3W9K4)</string>
            	<key>signingStyle</key>
            	<string>manual</string>
            	<key>stripSwiftSymbols</key>
            	<true/>
            	<key>teamID</key>
            	<string>72SA8V3WYL</string>
            	<key>thinning</key>
            	<string>&lt;none&gt;</string>
            </dict>
        </plist>

    after_run: 
    - _common_prepare
    - _common_clone
    - _common_test

  test_tvos:
    envs:
    - SAMPLE_APP_URL: $SAMPLE_ARTIFACTS_URL
    - BRANCH: $SAMPLE_ARTIFACTS_BRANCH
    - LEGACY: "no"
    - PRODUCT: "app"
    - BITRISE_XCARCHIVE_PATH: "./archives/TVOS.xcarchive"
    after_run: 
    - _common_prepare
    - _common_clone
    - _common_test

  test_appclip:
    envs:
    - SAMPLE_APP_URL: $SAMPLE_ARTIFACTS_URL
    - BRANCH: $SAMPLE_ARTIFACTS_BRANCH
    - LEGACY: "no"
    - PRODUCT: "app-clip"
    - BITRISE_XCARCHIVE_PATH: "./archives/Fruta.xcarchive"
    after_run: 
    - _common_prepare
    - _common_clone
    - _common_test

  _common_clone:
    steps:
    - script:
        inputs:
        - content: |-
            #!/usr/bin/env bash

            if [[ -z "${SAMPLE_APP_URL}" ]]; then
            echo "error: there is no SAMPLE_APP_URL env var specified"
            exit 1
            elif [[ -z "${COMMIT}" && -z "${BRANCH}" ]]; then
            echo "error: can't checkout: there is no BRANCH or COMMIT env var specified"
            exit 1
            fi

            git init
            git remote add origin "${SAMPLE_APP_URL}" 
            git fetch || exit 1

            [[ -n "${COMMIT}" ]] && git checkout "${COMMIT}" || git checkout "${BRANCH}"

  _common_prepare:
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            rm -rf "$ORIG_BITRISE_SOURCE_DIR/_tmp"
            mkdir -p "$ORIG_BITRISE_SOURCE_DIR/_tmp"
    - change-workdir:
        title: Switch working dir to _tmp dir
        run_if: true
        inputs:
        - path: "$ORIG_BITRISE_SOURCE_DIR/_tmp"
        - is_create_path: true
    - certificate-and-profile-installer:

  _common_test:
    steps:
    - path::./:
        title: Step Test - Export Options
        inputs:
        - use_legacy_export: $LEGACY
        - custom_export_options_plist_content: $PLIST
        - product: $PRODUCT
    - script:
        title: Output Test
        inputs:
        - content: |-
            echo "BITRISE_IPA_PATH: $BITRISE_IPA_PATH"
            echo "BITRISE_DSYM_PATH: $BITRISE_DSYM_PATH"
            rm "$BITRISE_IPA_PATH"
            rm "$BITRISE_DSYM_PATH"

  # ----------------------------------------------------------------
  # --- Utility workflows
  dep-update:
    title: Dep update
    description: |
      Used for updating bitrise dependencies with dep
    steps:
    - script:
        title: Dependency update
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            go get -u -v github.com/golang/dep/cmd/dep
            dep ensure -v
            dep ensure -v -update

  # ----------------------------------------------------------------
  # --- workflows to Share this step into a Step Library
  audit-this-step:
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            stepman audit --step-yml ./step.yml
